version: "3.8"

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: energy_trading
      POSTGRES_USER: energy_user
      POSTGRES_PASSWORD: energy_pass
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - energy-trading-net

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    networks:
      - energy-trading-net

  # BESS Node 1
  bess-node-1:
    build:
      context: ./energy-trading-rust
      dockerfile: Dockerfile
    command:
      [
        "cargo",
        "run",
        "--bin",
        "bess-node",
        "--",
        "--device-id",
        "1",
        "--capacity",
        "100.0",
        "--reserve-price",
        "15.0",
      ]
    environment:
      - RUST_LOG=info
    networks:
      - energy-trading-net
    depends_on:
      - postgres
      - redis

  # BESS Node 2
  bess-node-2:
    build:
      context: ./energy-trading-rust
      dockerfile: Dockerfile
    command:
      [
        "cargo",
        "run",
        "--bin",
        "bess-node",
        "--",
        "--device-id",
        "2",
        "--capacity",
        "80.0",
        "--reserve-price",
        "16.0",
      ]
    environment:
      - RUST_LOG=info
    networks:
      - energy-trading-net
    depends_on:
      - postgres
      - redis

  # BESS Node 3
  bess-node-3:
    build:
      context: ./energy-trading-rust
      dockerfile: Dockerfile
    command:
      [
        "cargo",
        "run",
        "--bin",
        "bess-node",
        "--",
        "--device-id",
        "3",
        "--capacity",
        "120.0",
        "--reserve-price",
        "14.5",
      ]
    environment:
      - RUST_LOG=info
    networks:
      - energy-trading-net
    depends_on:
      - postgres
      - redis

  # Aggregator 1 (Intelligent Strategy)
  aggregator-1:
    build:
      context: ./energy-trading-rust
      dockerfile: Dockerfile
    command:
      [
        "cargo",
        "run",
        "--bin",
        "aggregator",
        "--",
        "--device-id",
        "100",
        "--strategy",
        "intelligent",
      ]
    environment:
      - RUST_LOG=info
    networks:
      - energy-trading-net
    depends_on:
      - postgres
      - redis
      - bess-node-1
      - bess-node-2
      - bess-node-3

  # Aggregator 2 (Aggressive Strategy)
  aggregator-2:
    build:
      context: ./energy-trading-rust
      dockerfile: Dockerfile
    command:
      [
        "cargo",
        "run",
        "--bin",
        "aggregator",
        "--",
        "--device-id",
        "101",
        "--strategy",
        "aggressive",
      ]
    environment:
      - RUST_LOG=info
    networks:
      - energy-trading-net
    depends_on:
      - postgres
      - redis
      - bess-node-1
      - bess-node-2
      - bess-node-3

  # Aggregator 3 (Conservative Strategy)
  aggregator-3:
    build:
      context: ./energy-trading-rust
      dockerfile: Dockerfile
    command:
      [
        "cargo",
        "run",
        "--bin",
        "aggregator",
        "--",
        "--device-id",
        "102",
        "--strategy",
        "conservative",
      ]
    environment:
      - RUST_LOG=info
    networks:
      - energy-trading-net
    depends_on:
      - postgres
      - redis
      - bess-node-1
      - bess-node-2
      - bess-node-3

  # WebSocket Gateway
  gateway:
    build:
      context: ./energy-trading-rust
      dockerfile: Dockerfile
    command: ["cargo", "run", "--bin", "gateway", "--", "--port", "8080"]
    ports:
      - "8080:8080"
    environment:
      - RUST_LOG=info
    networks:
      - energy-trading-net
    depends_on:
      - postgres
      - redis

  # Frontend Dashboard (Next.js)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NEXT_PUBLIC_WS_URL=ws://localhost:8080/ws
    networks:
      - energy-trading-net
    depends_on:
      - gateway

  # Monitoring Dashboard (Optional - for advanced monitoring)
  monitoring:
    image: grafana/grafana:latest
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
    networks:
      - energy-trading-net
    profiles:
      - monitoring

volumes:
  postgres_data:
  grafana_data:

networks:
  energy-trading-net:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
